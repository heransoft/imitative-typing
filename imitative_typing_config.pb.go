// Code generated by protoc-gen-go.
// source: imitative_typing/imitative_typing_config.proto
// DO NOT EDIT!

/*
Package imitative_typing is a generated protocol buffer package.

It is generated from these files:
	imitative_typing/imitative_typing_config.proto

It has these top-level messages:
	FileExtension2AnnotationSymbol
	ImitativeTypingConfig
*/
package imitative_typing

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type FileExtension2AnnotationSymbol struct {
	FileExtension    *string `protobuf:"bytes,1,opt" json:"FileExtension,omitempty"`
	AnnotationSymbol *string `protobuf:"bytes,2,opt" json:"AnnotationSymbol,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileExtension2AnnotationSymbol) Reset()         { *m = FileExtension2AnnotationSymbol{} }
func (m *FileExtension2AnnotationSymbol) String() string { return proto.CompactTextString(m) }
func (*FileExtension2AnnotationSymbol) ProtoMessage()    {}

func (m *FileExtension2AnnotationSymbol) GetFileExtension() string {
	if m != nil && m.FileExtension != nil {
		return *m.FileExtension
	}
	return ""
}

func (m *FileExtension2AnnotationSymbol) GetAnnotationSymbol() string {
	if m != nil && m.AnnotationSymbol != nil {
		return *m.AnnotationSymbol
	}
	return ""
}

type ImitativeTypingConfig struct {
	FileExtension2AnnotationSymbol                    []*FileExtension2AnnotationSymbol `protobuf:"bytes,1,rep" json:"FileExtension2AnnotationSymbol,omitempty"`
	JavaScriptStartSymbol                             *string                           `protobuf:"bytes,2,opt" json:"JavaScriptStartSymbol,omitempty"`
	JavaScriptEndSymbol                               *string                           `protobuf:"bytes,3,opt" json:"JavaScriptEndSymbol,omitempty"`
	PreprocessorMacroForCurrentLine                   *string                           `protobuf:"bytes,4,opt" json:"PreprocessorMacroForCurrentLine,omitempty"`
	PreprocessorMacroForCurrentStartLine              *string                           `protobuf:"bytes,5,opt" json:"PreprocessorMacroForCurrentStartLine,omitempty"`
	PreprocessorMacroForCurrentEndLine                *string                           `protobuf:"bytes,6,opt" json:"PreprocessorMacroForCurrentEndLine,omitempty"`
	PreprocessorMacroForCurrentFileEndLine            *string                           `protobuf:"bytes,7,opt" json:"PreprocessorMacroForCurrentFileEndLine,omitempty"`
	JavaScriptTableNameForDirectory                   *string                           `protobuf:"bytes,8,opt" json:"JavaScriptTableNameForDirectory,omitempty"`
	JavaScriptFunctionNameForDirectoryInsert          *string                           `protobuf:"bytes,9,opt" json:"JavaScriptFunctionNameForDirectoryInsert,omitempty"`
	JavaScriptFunctionNameForDirectoryDelete          *string                           `protobuf:"bytes,10,opt" json:"JavaScriptFunctionNameForDirectoryDelete,omitempty"`
	JavaScriptFunctionNameForDirectorySelectFileCount *string                           `protobuf:"bytes,11,opt" json:"JavaScriptFunctionNameForDirectorySelectFileCount,omitempty"`
	JavaScriptFunctionNameForDirectorySelectFileName  *string                           `protobuf:"bytes,12,opt" json:"JavaScriptFunctionNameForDirectorySelectFileName,omitempty"`
	JavaScriptFunctionNameForDirectoryUpdate          *string                           `protobuf:"bytes,13,opt" json:"JavaScriptFunctionNameForDirectoryUpdate,omitempty"`
	JavaScriptTableNameForFile                        *string                           `protobuf:"bytes,14,opt" json:"JavaScriptTableNameForFile,omitempty"`
	JavaScriptFunctionNameForFileInsert               *string                           `protobuf:"bytes,15,opt" json:"JavaScriptFunctionNameForFileInsert,omitempty"`
	JavaScriptFunctionNameForFileDelete               *string                           `protobuf:"bytes,16,opt" json:"JavaScriptFunctionNameForFileDelete,omitempty"`
	JavaScriptFunctionNameForFileSelectLineCount      *string                           `protobuf:"bytes,17,opt" json:"JavaScriptFunctionNameForFileSelectLineCount,omitempty"`
	JavaScriptFunctionNameForFileUpdate               *string                           `protobuf:"bytes,18,opt" json:"JavaScriptFunctionNameForFileUpdate,omitempty"`
	JavaScriptFunctionNameForFileOrigin               *string                           `protobuf:"bytes,19,opt" json:"JavaScriptFunctionNameForFileOrigin,omitempty"`
	JavaScriptTableNameForLine                        *string                           `protobuf:"bytes,20,opt" json:"JavaScriptTableNameForLine,omitempty"`
	JavaScriptFunctionNameForLineInsert               *string                           `protobuf:"bytes,21,opt" json:"JavaScriptFunctionNameForLineInsert,omitempty"`
	JavaScriptFunctionNameForLineDelete               *string                           `protobuf:"bytes,22,opt" json:"JavaScriptFunctionNameForLineDelete,omitempty"`
	JavaScriptFunctionNameForLineSelect               *string                           `protobuf:"bytes,23,opt" json:"JavaScriptFunctionNameForLineSelect,omitempty"`
	JavaScriptFunctionNameForLineUpdate               *string                           `protobuf:"bytes,24,opt" json:"JavaScriptFunctionNameForLineUpdate,omitempty"`
	JavaScriptFunctionNameForLineOrigin               *string                           `protobuf:"bytes,25,opt" json:"JavaScriptFunctionNameForLineOrigin,omitempty"`
	JavaScriptTableNameForSystem                      *string                           `protobuf:"bytes,26,opt" json:"JavaScriptTableNameForSystem,omitempty"`
	JavaScriptTableNameForSystemFunctions             *string                           `protobuf:"bytes,27,opt" json:"JavaScriptTableNameForSystemFunctions,omitempty"`
	XXX_unrecognized                                  []byte                            `json:"-"`
}

func (m *ImitativeTypingConfig) Reset()         { *m = ImitativeTypingConfig{} }
func (m *ImitativeTypingConfig) String() string { return proto.CompactTextString(m) }
func (*ImitativeTypingConfig) ProtoMessage()    {}

func (m *ImitativeTypingConfig) GetFileExtension2AnnotationSymbol() []*FileExtension2AnnotationSymbol {
	if m != nil {
		return m.FileExtension2AnnotationSymbol
	}
	return nil
}

func (m *ImitativeTypingConfig) GetJavaScriptStartSymbol() string {
	if m != nil && m.JavaScriptStartSymbol != nil {
		return *m.JavaScriptStartSymbol
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptEndSymbol() string {
	if m != nil && m.JavaScriptEndSymbol != nil {
		return *m.JavaScriptEndSymbol
	}
	return ""
}

func (m *ImitativeTypingConfig) GetPreprocessorMacroForCurrentLine() string {
	if m != nil && m.PreprocessorMacroForCurrentLine != nil {
		return *m.PreprocessorMacroForCurrentLine
	}
	return ""
}

func (m *ImitativeTypingConfig) GetPreprocessorMacroForCurrentStartLine() string {
	if m != nil && m.PreprocessorMacroForCurrentStartLine != nil {
		return *m.PreprocessorMacroForCurrentStartLine
	}
	return ""
}

func (m *ImitativeTypingConfig) GetPreprocessorMacroForCurrentEndLine() string {
	if m != nil && m.PreprocessorMacroForCurrentEndLine != nil {
		return *m.PreprocessorMacroForCurrentEndLine
	}
	return ""
}

func (m *ImitativeTypingConfig) GetPreprocessorMacroForCurrentFileEndLine() string {
	if m != nil && m.PreprocessorMacroForCurrentFileEndLine != nil {
		return *m.PreprocessorMacroForCurrentFileEndLine
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptTableNameForDirectory() string {
	if m != nil && m.JavaScriptTableNameForDirectory != nil {
		return *m.JavaScriptTableNameForDirectory
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForDirectoryInsert() string {
	if m != nil && m.JavaScriptFunctionNameForDirectoryInsert != nil {
		return *m.JavaScriptFunctionNameForDirectoryInsert
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForDirectoryDelete() string {
	if m != nil && m.JavaScriptFunctionNameForDirectoryDelete != nil {
		return *m.JavaScriptFunctionNameForDirectoryDelete
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForDirectorySelectFileCount() string {
	if m != nil && m.JavaScriptFunctionNameForDirectorySelectFileCount != nil {
		return *m.JavaScriptFunctionNameForDirectorySelectFileCount
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForDirectorySelectFileName() string {
	if m != nil && m.JavaScriptFunctionNameForDirectorySelectFileName != nil {
		return *m.JavaScriptFunctionNameForDirectorySelectFileName
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForDirectoryUpdate() string {
	if m != nil && m.JavaScriptFunctionNameForDirectoryUpdate != nil {
		return *m.JavaScriptFunctionNameForDirectoryUpdate
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptTableNameForFile() string {
	if m != nil && m.JavaScriptTableNameForFile != nil {
		return *m.JavaScriptTableNameForFile
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForFileInsert() string {
	if m != nil && m.JavaScriptFunctionNameForFileInsert != nil {
		return *m.JavaScriptFunctionNameForFileInsert
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForFileDelete() string {
	if m != nil && m.JavaScriptFunctionNameForFileDelete != nil {
		return *m.JavaScriptFunctionNameForFileDelete
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForFileSelectLineCount() string {
	if m != nil && m.JavaScriptFunctionNameForFileSelectLineCount != nil {
		return *m.JavaScriptFunctionNameForFileSelectLineCount
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForFileUpdate() string {
	if m != nil && m.JavaScriptFunctionNameForFileUpdate != nil {
		return *m.JavaScriptFunctionNameForFileUpdate
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForFileOrigin() string {
	if m != nil && m.JavaScriptFunctionNameForFileOrigin != nil {
		return *m.JavaScriptFunctionNameForFileOrigin
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptTableNameForLine() string {
	if m != nil && m.JavaScriptTableNameForLine != nil {
		return *m.JavaScriptTableNameForLine
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForLineInsert() string {
	if m != nil && m.JavaScriptFunctionNameForLineInsert != nil {
		return *m.JavaScriptFunctionNameForLineInsert
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForLineDelete() string {
	if m != nil && m.JavaScriptFunctionNameForLineDelete != nil {
		return *m.JavaScriptFunctionNameForLineDelete
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForLineSelect() string {
	if m != nil && m.JavaScriptFunctionNameForLineSelect != nil {
		return *m.JavaScriptFunctionNameForLineSelect
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForLineUpdate() string {
	if m != nil && m.JavaScriptFunctionNameForLineUpdate != nil {
		return *m.JavaScriptFunctionNameForLineUpdate
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptFunctionNameForLineOrigin() string {
	if m != nil && m.JavaScriptFunctionNameForLineOrigin != nil {
		return *m.JavaScriptFunctionNameForLineOrigin
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptTableNameForSystem() string {
	if m != nil && m.JavaScriptTableNameForSystem != nil {
		return *m.JavaScriptTableNameForSystem
	}
	return ""
}

func (m *ImitativeTypingConfig) GetJavaScriptTableNameForSystemFunctions() string {
	if m != nil && m.JavaScriptTableNameForSystemFunctions != nil {
		return *m.JavaScriptTableNameForSystemFunctions
	}
	return ""
}

func init() {
}
